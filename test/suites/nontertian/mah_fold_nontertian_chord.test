// Test invalid null pointer
ASSERT_E(mah_fold_nontertian_chord(NULL, 1, &ERR), ERROR_INVALID_RANGE);

// Test invalid fold level too high (>= chord size)
struct mah_nontertian_chord fold_quartal_3 = mah_get_quartal_chord(NOTE(C, 0, MAH_OCTAVE_4), 3, NOTE_N(5, 0), NOTE_N(5, 0), &ERR);
ASSERT_E(mah_fold_nontertian_chord(&fold_quartal_3, 3, &ERR), ERROR_INVALID_FOLD_LEVEL);
ASSERT_E(mah_fold_nontertian_chord(&fold_quartal_3, 4, &ERR), ERROR_INVALID_FOLD_LEVEL);

// Test invalid fold level negative
ASSERT_E(mah_fold_nontertian_chord(&fold_quartal_3, -1, &ERR), ERROR_INVALID_FOLD_LEVEL);

// Test fold 1 level on 3-note quartal chord: C4-F4-Bb4 -> C4-F4-Bb3
ASSERT_NCP(mah_fold_nontertian_chord(&NCHORD, 1, &ERR),
    mah_get_quartal_chord(NOTE(C, 0, MAH_OCTAVE_4), 3, NOTE_N(5, 0), NOTE_N(5, 0), &ERR),
    NCHD(3, 0, STANDARD,
        NOTE_L(NOTE(C, 0, MAH_OCTAVE_4), NOTE(F, 0, MAH_OCTAVE_4), NOTE(B, -1, MAH_OCTAVE_4)),
        NOTE_L(NOTE(C, 0, MAH_OCTAVE_4), NOTE(F, 0, MAH_OCTAVE_4), NOTE(B, -1, MAH_OCTAVE_3))
    )
);

// Test fold 2 levels on 4-note quartal chord: C4-F4-Bb4-Eb5 -> C4-F4-Bb3-Eb4  
struct mah_nontertian_chord fold_quartal_4 = mah_get_quartal_chord(NOTE(C, 0, MAH_OCTAVE_4), 4, NOTE_N(5, 0), NOTE_N(5, 0), &ERR);
ASSERT_NCP(mah_fold_nontertian_chord(&NCHORD, 2, &ERR),
    fold_quartal_4,
    NCHD(4, 0, STANDARD,
        NOTE_L(NOTE(C, 0, MAH_OCTAVE_4), NOTE(F, 0, MAH_OCTAVE_4), NOTE(B, -1, MAH_OCTAVE_4), NOTE(E, -1, MAH_OCTAVE_5)),
        NOTE_L(NOTE(C, 0, MAH_OCTAVE_4), NOTE(F, 0, MAH_OCTAVE_4), NOTE(B, -1, MAH_OCTAVE_3), NOTE(E, -1, MAH_OCTAVE_4))
    )
);

// Test fold 1 level on 5-note quartal chord: C4-F4-Bb4-Eb5-Ab5 -> C4-F4-Bb4-Eb5-Ab4
struct mah_nontertian_chord fold_quartal_5 = mah_get_quartal_chord(NOTE(C, 0, MAH_OCTAVE_4), 5, NOTE_N(5, 0), NOTE_N(5, 0), &ERR);
ASSERT_NCP(mah_fold_nontertian_chord(&NCHORD, 1, &ERR),
    fold_quartal_5,
    NCHD(5, 0, STANDARD,
        NOTE_L(NOTE(C, 0, MAH_OCTAVE_4), NOTE(F, 0, MAH_OCTAVE_4), NOTE(B, -1, MAH_OCTAVE_4), NOTE(E, -1, MAH_OCTAVE_5), NOTE(A, -1, MAH_OCTAVE_5)),
        NOTE_L(NOTE(C, 0, MAH_OCTAVE_4), NOTE(F, 0, MAH_OCTAVE_4), NOTE(B, -1, MAH_OCTAVE_4), NOTE(E, -1, MAH_OCTAVE_5), NOTE(A, -1, MAH_OCTAVE_4))
    )
);

// Test fold 4 levels on 5-note chord (max allowed): C4-F4-Bb4-Eb5-Ab5 -> C4-F3-Bb3-Eb4-Ab4
ASSERT_NCP(mah_fold_nontertian_chord(&NCHORD, 4, &ERR),
    mah_get_quartal_chord(NOTE(C, 0, MAH_OCTAVE_4), 5, NOTE_N(5, 0), NOTE_N(5, 0), &ERR),
    NCHD(5, 0, STANDARD,
        NOTE_L(NOTE(C, 0, MAH_OCTAVE_4), NOTE(F, 0, MAH_OCTAVE_4), NOTE(B, -1, MAH_OCTAVE_4), NOTE(E, -1, MAH_OCTAVE_5), NOTE(A, -1, MAH_OCTAVE_5)),
        NOTE_L(NOTE(C, 0, MAH_OCTAVE_4), NOTE(F, 0, MAH_OCTAVE_3), NOTE(B, -1, MAH_OCTAVE_3), NOTE(E, -1, MAH_OCTAVE_4), NOTE(A, -1, MAH_OCTAVE_4))
    )
);

// Test zero fold (no-op)
ASSERT_NCP(mah_fold_nontertian_chord(&NCHORD, 0, &ERR),
    mah_get_quartal_chord(NOTE(D, 0, MAH_OCTAVE_4), 2, NOTE_N(5, 0), NOTE_N(5, 0), &ERR),
    NCHD(2, 0, STANDARD,
        NOTE_L(NOTE(D, 0, MAH_OCTAVE_4), NOTE(G, 0, MAH_OCTAVE_4)),
        NOTE_L(NOTE(D, 0, MAH_OCTAVE_4), NOTE(G, 0, MAH_OCTAVE_4))
    )
);

// Test with quintal chord - fold 1 level: D4-A4-E5 -> D4-A4-E4
struct mah_nontertian_chord fold_quintal_3 = mah_get_quintal_chord(NOTE(D, 0, MAH_OCTAVE_4), 3, NOTE_N(5, 0), NOTE_N(5, 0), &ERR);
ASSERT_NCP(mah_fold_nontertian_chord(&NCHORD, 1, &ERR),
    fold_quintal_3,
    NCHD(3, 0, STANDARD,
        NOTE_L(NOTE(D, 0, MAH_OCTAVE_4), NOTE(A, 0, MAH_OCTAVE_4), NOTE(E, 0, MAH_OCTAVE_5)),
        NOTE_L(NOTE(D, 0, MAH_OCTAVE_4), NOTE(A, 0, MAH_OCTAVE_4), NOTE(E, 0, MAH_OCTAVE_4))
    )
);

// Test fold after inversion - verify it works on current notes, not base notes
struct mah_nontertian_chord inverted_quartal = mah_get_quartal_chord(NOTE(C, 0, MAH_OCTAVE_4), 3, NOTE_N(5, 0), NOTE_N(5, 0), &ERR);
mah_invert_nontertian_chord(&inverted_quartal, 1, STANDARD, &ERR);
ASSERT_NCP(mah_fold_nontertian_chord(&NCHORD, 1, &ERR),
    inverted_quartal,
    NCHD(3, 1, STANDARD,
        NOTE_L(NOTE(C, 0, MAH_OCTAVE_4), NOTE(F, 0, MAH_OCTAVE_4), NOTE(B, -1, MAH_OCTAVE_4)),
        NOTE_L(NOTE(F, 0, MAH_OCTAVE_4), NOTE(B, -1, MAH_OCTAVE_4), NOTE(C, 0, MAH_OCTAVE_4))
    )
);